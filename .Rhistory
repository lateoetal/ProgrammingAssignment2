install.packages("swirl")
library(swirl)
swirl()
swirl()
swirl()
swirl()
Basic_Building_Blocks
bye()
swirl()
swirl()
swirl()
funkcija1 <- if(x < 3) {}
funkcija1 <- if(x < 3) {
y <- x * x
} else {
y - sqrt(x)
}
funkcija1 <- if(x > 3) {
y <- x * x
} else {
y <- sqrt(x)
}
if(x > 3) {
y <- x * x
} else {
y <- sqrt(x)
}
x <- 1:10
funkcija1 <- if(x > 3) {
y <- x * x
} else {
y <- sqrt(x)
}
x <- 4
funkcija1 <- if(x > 3) {
y <- x * x
} else {
y <- sqrt(x)
}
funkcija1(4)
x <- 4
funkcija1 <- if(x > 3) {
y <- x * x
} else {
y <- sqrt(x)
}
funkcija1(4)
for(i in 1:10) {
print(i)
}
x <- c("a", "b", "c", "d")
for(i in 1:4) {
print(x[i])
}
for(i in seq_along(x)) {
print(x[i])
}
for(letter in x) {
print(x[i])
}
for(letter in x) {
print(letter)
}
for(i in 1:4) print(x[i])
x <- matrix(1:6, 2, 3)
x
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(y))) {
print(x[i, j])
}
}
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(x[i, j])
}
}
count <- 0
while(count < 15) {
print(count)
count <- count + 1
}
str(rbinom)
z <- 5
while(z >= 3 & z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if(coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
}
add2 <- function(x, y) {
x + y
}
add2(3, 5)
above<- function(x, n) {
use <- x > n
x[use]
}
above<- function(x, n) {
use <- x > n
x[use]
}
x <- 1:20
above(x)
above(x, 12)
above <- function(x, n = 10) {
use <- x > n
x[use]
}
above(12)
above(x)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i])
}
means
}
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
str(rnorm)
rnorm(100)
Sys.time()
p <- Sys.time()
q <- as.POSIXlt(p)
q
names(q)
unclass(p)
str(strptime)
?strptime
complete <- function(directory, id = 1:332) {
files_list <- list.files(directory, full.names = TRUE)
data <- data.frame()
for(i in id) {
info <- read.csv(files_list[i])
info <- na.omit(info)
nobs <- nrow(info)
data <- rbind(data, data.frame(i, nobs))
}
}
complete("specdata", 34)
getwd()
setwd("~/R Coursera")
corr <- function(directory, threshold = 0) {
files_list <- list.files(directory, full.names = TRUE)
data <- vector(mode = "numeric", length = 0)
for(i in 1:length(files_list)) {
info <- read.csv(files_list, header = TRUE)
info <- info[complete.cases(info), ]
csum <- nrow(info)
if(csum > threshold) {
data <- c(data, cor(info$nitrate, info$sulfate))
}
}
return(data)
}
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
corr <- function(directory, threshold = 0) {
files_list <- list.files(directory, full.names = TRUE)
data <- vector(mode = "numeric", length = 0)
for(i in 1:length(files_list)) {
info <- read.csv(files_list, header = TRUE)
info <- info[complete.cases(info), ]
csum <- nrow(info)
if(csum > threshold) {
data <- c(data, cor(info$nitrate, info$sulfate))
}
}
return(data)
}
cr <- corr("specdata")
corr <- function(directory, threshold = 0) {
files_list <- list.files(directory, full.names = TRUE)
data <- vector(mode = "numeric", length = 0)
for(i in 1:length(files_list)) {
info <- read.csv(files_list, header = TRUE)
info <- info[complete.cases(info), ]
csum <- nrow(info)
if(csum > threshold) {
data <- c(data, cor(info$nitrate, info$sulfate))
}
}
return(data)
}
cr <- corr("specdata")
corr <- function(directory, threshold = 0) {
files_list <- list.files(directory, full.names = TRUE)
data <- vector(mode = "numeric", length = 0)
for(i in 1:length(files_list)) {
info <- read.csv(files_list, header = TRUE)
info <- info[complete.cases(info), ]
csum <- nrow(info)
if(csum > threshold) {
data <- c(data, cor(info$nitrate, info$sulfate))
}
}
return(data)
}
cr <- corr("specdata")
corr <- function(directory, threshold = 0) {
files_list <- list.files(directory, full.names = TRUE)
data <- vector(mode = "numeric", length = 0)
for(i in 1:332) {
info <- read.csv(files_list, header = TRUE)
info <- info[complete.cases(info), ]
csum <- nrow(info)
if(csum > threshold) {
data <- c(data, cor(info$nitrate, info$sulfate))
}
}
return(data)
}
cr <- corr("specdata")
function (description = "", open = "", blocking = TRUE, encoding = getOption("encoding"),
raw = FALSE, method = getOption("url.method", "default"))
getwd()
corr <- function(directory, threshold = 0) {
files_list <- list.files(directory, full.names = FALSE)
data <- vector(mode = "numeric", length = 0)
for(i in 1:332) {
info <- read.csv(files_list, header = TRUE)
info <- info[complete.cases(info), ]
csum <- nrow(info)
if(csum > threshold) {
data <- c(data, cor(info$nitrate, info$sulfate))
}
}
return(data)
}
cr <- corr("specdata")
corr<-function(directory,Threshold=0){
files=list.files(directory)
corr_vector<-c()
dataframe <-data.frame()
for(i in files){
file<-paste(directory,i,sep = '/')
data <- read.csv(file)
df<- na.omit(data)
if(!is.na(df$sulfate) & !is.na(df$nitrate)){
if(df$sulfate>Threshold && df$nitrate>Threshold){
corr_vector<-cor(df$sulfate,df$nitrate)
}
}
}
return (corr_vector)
}
cr <- corr("specdata")
corr <- function(directory, threshold = 0) {
files_list <- list.files(directory, full.names = TRUE)
data <- vector(mode = "numeric", length = 0)
for(i in 1:332) {
info <- read.csv(files_list, header = TRUE)
info <- info[complete.cases(info), ]
csum <- nrow(info)
if(csum > threshold) {
data <- c(data, cor(info$nitrate, info$sulfate))
}
}
return(data)
}
cr <- corr("specdata")
corr <- function(directory, threshold = 0) {
return <- complete(directory)      #returns only complete files in the form of a data.frame with file names in 1 column and # of complete cases in the other
useful <- subset(return, nobs > threshold) #retains only those which have greater than threshold of complete cases
ids <- as.list(useful["id"]) #ids correspond to the file name
for (i in ids) {
data<- read.csv(paste(directory,"/",formatC(i,width=3,flag="0"),".csv",sep=""))
}
}
cr <- corr("specdata")
corr <- function(directory, threshold = 0) {
return <- complete.cases(directory)      #returns only complete files in the form of a data.frame with file names in 1 column and # of complete cases in the other
useful <- subset(return, nobs > threshold) #retains only those which have greater than threshold of complete cases
ids <- as.list(useful["id"]) #ids correspond to the file name
for (i in ids) {
data<- read.csv(paste(directory,"/",formatC(i,width=3,flag="0"),".csv",sep=""))
}
}
cr <- corr("specdata")
corr <- function(directory, threshold = 0) {
directory <- paste(getwd(), "/", directory, "/", sep = "")
files_list <- list.files(directory, full.names = TRUE)
data <- vector(mode = "numeric", length = 0)
for(i in 1:332) {
info <- read.csv(files_list, header = TRUE)
info <- info[complete.cases(info), ]
csum <- nrow(info)
if(csum > threshold) {
data <- c(data, cor(info$nitrate, info$sulfate))
}
}
return(data)
}
cr <- corr("specdata")
corr<-function(directory,threshold=0){
#create list of file names
filesD<-list.files(directory,full.names = TRUE)
#create empty vector
dat <- vector(mode = "numeric", length = 0)
for(i in 1:length(filesD)){
#read in file
temp<- read.csv(filesD[i],header=TRUE)
#delete NAs
temp<-temp[complete.cases(temp),]
#count the number of observations
csum<-nrow(temp)
#if the number of rows is greater than the threshold
if(csum>threshold){
#for that file you find the correlation between nitrate and sulfate
#combine each correlation for each file in vector format using the concatenate function
#since this is not a data frame we cannot use rbind or cbind
dat<-c(dat,cor(temp$nitrate,temp$sulfate))
}
}
return(dat)
}
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
corr <- function(directory, threshold = 0) {
files_list <- list.files(directory, full.names = TRUE)
data <- vector(mode = "numeric", length = 0)
for(i in 1:length(files_list)) {
info <- read.csv(files_list[i], header = TRUE)
info <- info[complete.cases(info), ]
csum <- nrow(info)
if(csum > threshold) {
data <- c(data, cor(info$nitrate, info$sulfate))
}
}
return(data)
}
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
complete <- function(directory, id = 1:332) {
# listing all the files inside the working directory
files_list <- list.files(directory, full.names = TRUE)
# creating an empty data frame for later purposes
data <- data.frame()
# starting with a for loop, in order to get all files imported, from 1 to 332
for(i in id) {
# importing all the files from the working directory, using files_list and by indexing
info <- read.csv(files_list[i])
# omitting all the NAs from the files imported
info <- na.omit(info)
# calculating the number of rows for the files imported
nobs <- nrow(info)
# binding previously created empty data frame, with a new data frame consisted of a file number column and just before defined nobs
data <- rbind(data, data.frame(i, nobs))
}
# returnig a new data frame called data
return(data)
}
str(vector)
?vector
# importing all the files from the working directory, using files_list and by indexing
info <- read.csv(files_list, header = TRUE)
corr <- function(directory, threshold = 0) {
# listing all the files inside the working directory
files_list <- list.files(directory, full.names = TRUE)
# creating an empty vector of a specified mode and length with a vector() function
data <- vector(mode = "numeric", length = 0)
# starting with a for loop, through all the files we are importing
for(i in 1:length(files_list)) {
# importing all the files from the working directory, using files_list and by indexing
info <- read.csv(files_list, header = TRUE)
# including only complete cases, i.e. omitting all the missing values
info <- info[complete.cases(info), ]
# calculating a number of rows of info
csum <- nrow(info)
# if control structure which has a logical condition that csum must be greater than default threshold
if(csum > threshold) {
# if the previous condition holds a vector is created, consisting of a previously defined empty vector and a number which represents a correlation between the two info columns - nitrate and sulfate
data <- c(data, cor(info$nitrate, info$sulfate))
}
}
# returnig a new vector called data
return(data)
}
corr("specdata", 45)
traceback()
library(datasets)
data(iris)
?iris
iris
virginica <- iris[iris$Species == "virginica"]
virginica <- iris[iris$Species == "virginica", ]
virginica
mean(virginica$Sepal.Length)
mean(iris[iris$Species == "virginica", ]$Sepal.Length)
names(iris)
apply(iris[, 1:4], 1, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
apply(iris, 1, mean)
apply(iris, 2, mean)
colMeans(iris)
library(datasets)
data(mtcars)
head(mtcars, n = 15)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
a <- tapply(mtcars$mpg, mtcars$cyl, mean)
abs(a$4 - a$8)
a
a$4
a[4]
a[[4]]
a["4"]
abs(a["4"] - a["8"])
mean(mtcars[mtcars$cyl == "8", ]$hp) - mean(mtcars[mtcars$cyl == "4", ]$hp)
round(126.5779)
debug(ls)
ls
ls()
debug(ls)
ls()
apply(iris[, 1:4], 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
setwd("~/GitHub/ProgrammingAssignment2")
